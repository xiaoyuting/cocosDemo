{"version":3,"sources":["file:///Users/a1/templateProject/assets/scripts/gesture/guestDemo.ts"],"names":["_decorator","Component","EPhysics2DDrawFlags","PhysicsSystem2D","Vec3","GuestureManger","EventCenter","ccclass","property","guestDemo","geusetManger","phy","start","node","onTap","bind","onMove","onLoad","instance","enable","debugDrawFlags","All","dire","console","log","getInstance","post","setWorldPosition","x","y","event","onDoubleTap","onLongPress","onSwipe","direction","onPinch","scale","onRotate","angle","update","deltaTime"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,mB,OAAAA,mB;AAAuCC,MAAAA,e,OAAAA,e;AAAqCC,MAAAA,I,OAAAA,I;;AACnGC,MAAAA,c,iBAAAA,c;;AAEAC,MAAAA,W,iBAAAA,W;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBR,U;;2BAGjBS,S,WADZF,OAAO,CAAC,WAAD,C,gBAAR,MACaE,SADb,SAC+BR,SAD/B,CACyC;AAAA;AAAA;AAAA,eAC7BS,YAD6B;AAAA,eAE7BC,GAF6B;AAAA;;AAGrCC,QAAAA,KAAK,GAAG;AACJ,eAAKF,YAAL,GAAoB;AAAA;AAAA,gDAAmB,KAAKG,IAAxB,CAApB;AACA,eAAKH,YAAL,CAAkBI,KAAlB,GAA0B,KAAKA,KAAL,CAAWC,IAAX,CAAgB,IAAhB,CAA1B;AACA,eAAKL,YAAL,CAAkBM,MAAlB,GAA2B,KAAKA,MAAL,CAAYD,IAAZ,CAAiB,IAAjB,CAA3B,CAHI,CAIL;AACF;;AAESE,QAAAA,MAAM,GAAS;AACrBd,UAAAA,eAAe,CAACe,QAAhB,CAAyBC,MAAzB,GAAkC,IAAlC;AACAhB,UAAAA,eAAe,CAACe,QAAhB,CAAyBE,cAAzB,GAA0ClB,mBAAmB,CAACmB,GAA9D;AACH;;AACDL,QAAAA,MAAM,CAACM,IAAD,EAAW;AACbC,UAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACA;AAAA;AAAA,0CAAYC,WAAZ,GAA0BC,IAA1B,CAA+B,WAA/B,EAA2C,uBAA3C;AACA,eAAKb,IAAL,CAAUc,gBAAV,CAA2B,IAAIvB,IAAJ,CAASkB,IAAI,CAACM,CAAd,EAAgBN,IAAI,CAACO,CAArB,CAA3B;AACH;;AACDf,QAAAA,KAAK,CAACgB,KAAD,EAAkB;AACnBP,UAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACH;;AACDO,QAAAA,WAAW,CAACD,KAAD,EAAkB;AACzBP,UAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACH;;AACDQ,QAAAA,WAAW,CAACF,KAAD,EAAkB;AACzBP,UAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACH;;AACDS,QAAAA,OAAO,CAACH,KAAD,EAAkBI,SAAlB,EAAiC;AACpCX,UAAAA,OAAO,CAACC,GAAR,CAAY,wCAAwCU,SAApD;AACH;;AACDC,QAAAA,OAAO,CAACC,KAAD,EAAc;AACjBb,UAAAA,OAAO,CAACC,GAAR,CAAY,mCAAmCY,KAA/C;AACH;;AACDC,QAAAA,QAAQ,CAACC,KAAD,EAAc;AACrBf,UAAAA,OAAO,CAACC,GAAR,CAAY,oCAAoCc,KAAhD;AACA;;AACDC,QAAAA,MAAM,CAACC,SAAD,EAAoB,CACvB;AACD;AAEF;AACA;AACA;AACA;AACC;;AA7CoC,O","sourcesContent":["import { _decorator, Component, EPhysics2DDrawFlags, EventTouch, Node, PhysicsSystem2D,PhysicsSystem, Vec2, Vec3,UITransform,v2, ERaycast2DType } from 'cc';\nimport { GuestureManger } from './GuestureManger';\nimport { PhysicsManger } from '../physicsSystem2D/PhysicsManger';\nimport { EventCenter } from '../notifition/EventCenter';\nconst { ccclass, property } = _decorator;\n\n@ccclass('guestDemo')\nexport class guestDemo extends Component {\n    private geusetManger:GuestureManger \n    private phy:PhysicsManger\n    start() {\n        this.geusetManger = new GuestureManger(this.node)\n        this.geusetManger.onTap = this.onTap.bind(this)\n        this.geusetManger.onMove = this.onMove.bind(this)\n       // this.phy =new  PhysicsManger(this.node,100,[new  Vec3(0,-1,0)])\n    }\n\n    protected onLoad(): void {\n        PhysicsSystem2D.instance.enable = true\n        PhysicsSystem2D.instance.debugDrawFlags = EPhysics2DDrawFlags.All\n    }\n    onMove(dire:Vec2){\n        console.log('qwewqewqewqeqwewqewqewq')\n        EventCenter.getInstance().post('eventtest',\"qwewqewqewqewqewqewqe\")\n        this.node.setWorldPosition(new Vec3(dire.x,dire.y))\n    }\n    onTap(event:EventTouch){\n        console.log('custom tap handler' )\n    }\n    onDoubleTap(event:EventTouch){\n        console.log('custom doubletap handler  '  )\n    }\n    onLongPress(event:EventTouch){\n        console.log('custom longpress handler  ')\n    }\n    onSwipe(event:EventTouch,direction:Vec2){\n        console.log('custom swipe handler ,  direction :' + direction)\n    }\n    onPinch(scale:number){\n        console.log('custom scale handler , scale :' + scale)\n    }\n    onRotate(angle:number){\n     console.log('custom rotate handler , angle :' + angle)\n    }\n    update(deltaTime: number) {\n       // let a = this.phy.currentPhyResult()\n      //  console.log('phy:'+a)\n\n    //   let results = PhysicsSystem2D.instance.raycast(v2(this.node.getWorldPosition().x,this.node.getWorldPosition().y),\n    //     v2(this.node.getWorldPosition().x+ (this.node.getComponent(UITransform).contentSize.width/2+100)*1) ,\n    //    this.node.getWorldPosition().y+(this.node.getComponent(UITransform).contentSize.height/2+100)*0 ,ERaycast2DType.Closest)\n    //    console.log('result ='+ results.length)\n    }\n}\n\n"]}